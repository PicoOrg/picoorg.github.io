<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pico Org</title><description>Pico组织博客</description><link>https://picoorg.github.io/</link><language>zh_CN</language><item><title>OAuth2攻击面分析</title><link>https://picoorg.github.io/posts/oauth2%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/oauth2%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/</link><guid isPermaLink="true">https://picoorg.github.io/posts/oauth2%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/oauth2%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/</guid><description>本文主要梳理OAuth2常见攻击手段，并且结合实际案例进行分析。</description><pubDate>Tue, 07 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%89%8D%E8%A8%80&quot;&gt;1. 前言&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-oauth-10%E6%BC%8F%E6%B4%9Esession-fixation-attack%E5%88%86%E6%9E%90&quot;&gt;1.1. OAuth 1.0漏洞(Session Fixation Attack)分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%BB%80%E4%B9%88%E6%98%AFoauth2&quot;&gt;2. 什么是OAuth2&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E8%A7%92%E8%89%B2&quot;&gt;2.1. 角色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E5%8D%8F%E8%AE%AE%E6%B5%81%E7%A8%8B&quot;&gt;2.2. 协议流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F&quot;&gt;2.3. 授权模式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#231-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8Fauthorization-code&quot;&gt;2.3.1. 授权码模式(Authorization Code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#232-%E6%8E%88%E6%9D%83%E7%A0%81pkce%E6%A8%A1%E5%BC%8Fauthorization-code-with-pkce&quot;&gt;2.3.2. 授权码+PKCE模式(Authorization Code with PKCE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#233-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%87%AD%E8%AF%81%E6%A8%A1%E5%BC%8Fclient-credentials&quot;&gt;2.3.3. 客户端凭证模式(Client Credentials)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#234-%E7%94%A8%E6%88%B7%E5%87%AD%E8%AF%81%E6%A8%A1%E5%BC%8Fresource-owner-password-credentials-%E4%B8%8D%E5%AE%89%E5%85%A8&quot;&gt;2.3.4. 用户凭证模式(Resource Owner Password Credentials) 不安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#235-%E9%9A%90%E5%BC%8F%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8Fimplicit-%E4%B8%8D%E5%AE%89%E5%85%A8&quot;&gt;2.3.5. 隐式授权模式(Implicit) 不安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#236-%E8%AE%BE%E5%A4%87%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%BC%8Fdevice-code-%E6%9E%81%E5%A4%A7%E6%A6%82%E7%8E%87%E5%AD%98%E5%9C%A8session-fixation-attack%E6%BC%8F%E6%B4%9E&quot;&gt;2.3.6. 设备代码模式(Device Code) 极大概率存在Session Fixation Attack漏洞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-oidc&quot;&gt;2.4. OIDC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-oauth2%E6%94%BB%E5%87%BB%E9%9D%A2&quot;&gt;3. OAuth2攻击面&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-csrf%E5%AF%BC%E8%87%B4%E7%BB%91%E5%AE%9A%E5%8A%AB%E6%8C%81&quot;&gt;3.1. CSRF导致绑定劫持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-redirect_uri%E7%BB%95%E8%BF%87%E5%AF%BC%E8%87%B4%E6%8E%88%E6%9D%83%E5%8A%AB%E6%8C%81&quot;&gt;3.2. redirect_uri绕过导致授权劫持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-scope%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE&quot;&gt;3.3. scope越权访问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A&quot;&gt;4. 名词解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot;&gt;5. 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;随着大量开放平台的出现，建立在开放平台之上的各种第三方应用也在大量涌现，出于对安全性和统一标准的要求，诞生了oauth协议。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5849&quot;&gt;OAuth 1.0&lt;/a&gt;于2007年推出后迅速被广泛使用。&lt;/p&gt;
&lt;p&gt;但是在2009年，OAuth 1.0被曝出存在严重安全漏洞&lt;a href=&quot;https://oauth.net/advisories/2009-1/&quot;&gt;Session Fixation Attack&lt;/a&gt;，于同年发布修复后版本&lt;a href=&quot;https://oauth.net/core/1.0a/&quot;&gt;OAuth 1.0 Revision A&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2010年发布&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot;&gt;OAuth 2.0&lt;/a&gt;，是OAuth协议的下一版本，但与OAuth 1.0版本互不兼容。&lt;/p&gt;
&lt;p&gt;2013年发布&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7636&quot;&gt;PKCE(Proof Key for Code Exchange by OAuth Public Clients)&lt;/a&gt;，是OAuth 2.0的一个扩展，用于增强公共客户端的安全性。&lt;/p&gt;
&lt;p&gt;2015年发布&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8252&quot;&gt;OAuth 2.0 for Native Apps&lt;/a&gt;，是OAuth 2.0的一个扩展，用于增强移动应用的安全性，描述了使用OAuth 2.0的本机和移动应用程序的安全要求和其他建议。包括不允许第三方应用打开嵌入式web视图，以防止钓鱼攻击，以及如何在平台上执行的特定建议。同时还建议使用PKCE扩展进一步保护用户。&lt;/p&gt;
&lt;p&gt;2017年发布&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics&quot;&gt;Security Best Current Practice&lt;/a&gt;，是OAuth 2.0的一个扩展，描述了安全要求和其他建议，用于实现OAuth 2.0的客户端和服务器。&lt;/p&gt;
&lt;p&gt;2019年发布&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps&quot;&gt;OAuth 2.0 for Browser-Based Apps&lt;/a&gt;，是OAuth 2.0的一个扩展，用于增强浏览器应用的安全性，针对SPA(Single Page Application)建议使用PKCE扩展替代隐式授权流(Implicit flow)。&lt;/p&gt;
&lt;p&gt;2021年发布&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot;&gt;OAuth 2.1&lt;/a&gt;，OAuth 2.1总结了后续规范中发布的更改，以简化核心文档。主要区别如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PKCE是所有使用授权码流的OAuth客户端的必需项&lt;/li&gt;
&lt;li&gt;重定向URI必须使用精确字符串匹配进行比较&lt;/li&gt;
&lt;li&gt;省略了隐式授权流（response_type = token）的定义&lt;/li&gt;
&lt;li&gt;省略了资源所有者密码凭证授予的定义&lt;/li&gt;
&lt;li&gt;Bearer令牌使用省略了在URI的查询字符串中使用bearer令牌的使用&lt;/li&gt;
&lt;li&gt;对于公共客户端，刷新令牌必须是发送者约束的或一次性使用&lt;/li&gt;
&lt;li&gt;公共和机密客户端的定义已简化为仅指示客户端是否具有凭据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.1. OAuth 1.0漏洞(Session Fixation Attack)分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;./801e57d84801b8abf8cde2e8793bf185.png&quot; alt=&quot;801e57d84801b8abf8cde2e8793bf185.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;正常流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问第三方应用&lt;/li&gt;
&lt;li&gt;用户请求从资源提供者导入资源&lt;/li&gt;
&lt;li&gt;用户携带oauth_token跳转到资源提供者的授权页面&lt;/li&gt;
&lt;li&gt;用户登录到资源提供者系统&lt;/li&gt;
&lt;li&gt;用户授权oauth_token访问资源权限&lt;/li&gt;
&lt;li&gt;用户携带oauth_token跳转到return_url指定的第三方应用&lt;/li&gt;
&lt;li&gt;第三方应用使用oauth_token请求资源&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;./79e8df9b51ab3f86d871bd6002f2dc2c.png&quot; alt=&quot;79e8df9b51ab3f86d871bd6002f2dc2c.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;攻击者可以利用的流程在3、4、5、6步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击者构造包含oauth_token和无效return_url的URL&lt;/li&gt;
&lt;li&gt;让受害者点击链接访问，登录授权后，跳转到无效return_url&lt;/li&gt;
&lt;li&gt;此时受害者授权流程已经中断，攻击者可以利用受害者的oauth_token访问第三方应用完成授权&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;漏洞成因可以总结为，授权码生成方式问题。OAuth1.0中，授权码在请求授权过程中可任意生成，导致授权码可能来自于攻击者。同时授权和令牌获取过程是割裂的，导致攻击者可以优先于受害者获取令牌。&lt;/p&gt;
&lt;h1&gt;2. 什么是OAuth2&lt;/h1&gt;
&lt;p&gt;OAuth 2.0是一个业界标准的授权协议，其定义了四种可以适用于各种应用场景的授权交互模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权码模式(Authorization Code)&lt;/li&gt;
&lt;li&gt;客户端凭证模式(Client Credentials)&lt;/li&gt;
&lt;li&gt;用户凭证模式(Resource Owner Password Credentials)&lt;/li&gt;
&lt;li&gt;隐式授权模式(Implicit)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，授权码模式被广泛应用于第三方互联网开放平台，通过第三方登录是其最常见应用场景之一，比如使用微信、QQ和淘宝账号进行登录。&lt;/p&gt;
&lt;p&gt;有一些设备存在无浏览器或输入受限情况，所以在&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8628&quot;&gt;rfc8628 - OAuth 2.0 Device Authorization Grant&lt;/a&gt;引入设备授权(Device code)模式。&lt;/p&gt;
&lt;p&gt;为了解决SPA、原生应用等授权安全性问题，基于授权码模式引入PKCE，形成授权码+PKCE模式(Authorization Code with PKCE)。&lt;/p&gt;
&lt;h2&gt;2.1. 角色&lt;/h2&gt;
&lt;p&gt;OAuth 2.0定义了四种角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;资源拥有者（Resource Owner）：资源拥有者是指可以授权第三方应用访问自己资源的用户，比如微信用户。&lt;/li&gt;
&lt;li&gt;资源服务器（Resource Server）：资源服务器是指存储资源的服务器，比如微信服务器。&lt;/li&gt;
&lt;li&gt;客户端（Client）：客户端是指第三方应用，比如京东小程序。&lt;/li&gt;
&lt;li&gt;授权服务器（Authorization Server）：授权服务器是指用于进行授权的服务器，比如微信开放平台。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2.2. 协议流程&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;+--------+                               +---------------+
|        |--(A)- Authorization Request -&amp;gt;|   Resource    |
|        |                               |     Owner     |
|        |&amp;lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&amp;gt;| Authorization |
| Client |                               |     Server    |
|        |&amp;lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&amp;gt;|    Resource   |
|        |                               |     Server    |
|        |&amp;lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A. 客户端向资源拥有者发起授权请求，请求授权服务器授予客户端访问资源服务器的权限。&lt;/li&gt;
&lt;li&gt;B. 资源拥有者授权客户端访问资源服务器的权限，授权服务器返回授权码给客户端。&lt;/li&gt;
&lt;li&gt;C. 客户端向授权服务器请求访问令牌。&lt;/li&gt;
&lt;li&gt;D. 授权服务器验证授权码，返回访问令牌给客户端。&lt;/li&gt;
&lt;li&gt;E. 客户端向资源服务器请求资源。&lt;/li&gt;
&lt;li&gt;F. 资源服务器验证访问令牌，返回资源给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.3. 授权模式&lt;/h2&gt;
&lt;p&gt;仅ABCD流程不同，区分为不同模式。&lt;/p&gt;
&lt;h3&gt;2.3.1. 授权码模式(Authorization Code)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./997ae2800f9c9f31ee64b386c160e018.png&quot; alt=&quot;997ae2800f9c9f31ee64b386c160e018.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这种模式广泛用于第三方应用授权登录，比如使用微信、QQ账号进行登录。&lt;/p&gt;
&lt;h3&gt;2.3.2. 授权码+PKCE模式(Authorization Code with PKCE)&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7636&quot;&gt;rfc7636 - Proof Key for Code Exchange by OAuth Public Clients&lt;/a&gt;定义了PKCE，用于解决授权码模式存在的安全性问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./3a1c8a2c4c9483dd97d676d46f7c373a.png&quot; alt=&quot;3a1c8a2c4c9483dd97d676d46f7c373a.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这种模式广泛用于客户端应用授权登录，比如electron应用、移动应用等。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;code_verifier：在 &lt;code&gt;[A-Z] / [a-z] / [0-9] / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;&lt;/code&gt; 范围内，生成43-128位的随机字符串。&lt;/li&gt;
&lt;li&gt;code_challenge：则是对 code_verifier 通过 code_challenge_method 例如 sha256 转换得来的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: PKCE到底防御哪种攻击？ A: 在SPA、原生应用（如移动应用）、桌面应用（如electron）中，授权过程中有可能会打开外部浏览器，而浏览器可能会被其他应用劫持，导致授权过程被篡改。PKCE是为了防御这种攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2.3.3. 客户端凭证模式(Client Credentials)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./0ea51598b4ff50260fb5617c783417a8.png&quot; alt=&quot;0ea51598b4ff50260fb5617c783417a8.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这种模式用于客户端应用存储凭证，自行授权访问资源服务器，比如后端服务使用AK/SK请求操作OSS资源。&lt;/p&gt;
&lt;h3&gt;2.3.4. 用户凭证模式(Resource Owner Password Credentials) 不安全&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./9c140672e8cc8683a074d16fdae83826.png&quot; alt=&quot;9c140672e8cc8683a074d16fdae83826.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;由于凭证会发送给第三方使用，所以这种模式不安全，不推荐使用。&lt;/p&gt;
&lt;h3&gt;2.3.5. 隐式授权模式(Implicit) 不安全&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./25d2de245c3a6040111a64eb1d91f7f8.png&quot; alt=&quot;25d2de245c3a6040111a64eb1d91f7f8.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;一般用于无后端应用，前端存储凭证。&lt;/p&gt;
&lt;p&gt;由于是跳转到三方应用使用GET请求，且服务器直接回传的是授权凭证，在终端容易被读取，如通过资源文件referer，所以这种模式不安全，不推荐使用。&lt;/p&gt;
&lt;p&gt;在某篇博客中曾看到，腾讯存在某个服务使用了隐式授权模式，但是回传Access Token的时候，使用锚点（#），这样锚点之后的数据就不会发送给服务器。但是这种方式也存在安全问题，因为锚点之后的数据是可以被前端获取的，所以这种方式也不安全。&lt;/p&gt;
&lt;h3&gt;2.3.6. 设备代码模式(Device Code) 极大概率存在Session Fixation Attack漏洞&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8628&quot;&gt;rfc8628 - OAuth 2.0 Device Authorization Grant&lt;/a&gt;定义了一种新的授权模式，用于设备在无浏览器或输入受限情况下的授权。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----------+                                +----------------+
|          |&amp;gt;---(A)-- Client Identifier ---&amp;gt;|                |
|          |                                |                |
|          |&amp;lt;---(B)-- Device Code,      ---&amp;lt;|                |
|          |          User Code,            |                |
|  Device  |          &amp;amp; Verification URI    |                |
|  Client  |                                |                |
|          |  [polling]                     |                |
|          |&amp;gt;---(E)-- Device Code       ---&amp;gt;|                |
|          |          &amp;amp; Client Identifier   |                |
|          |                                |  Authorization |
|          |&amp;lt;---(F)-- Access Token      ---&amp;lt;|     Server     |
+----------+   (&amp;amp; Optional Refresh Token)   |                |
      v                                     |                |
      :                                     |                |
      (C) User Code &amp;amp; Verification URI      |                |
      :                                     |                |
      v                                     |                |
+----------+                                |                |
| End User |                                |                |
|    at    |&amp;lt;---(D)-- End user reviews  ---&amp;gt;|                |
|  Browser |          authorization request |                |
+----------+                                +----------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;./e8de63708d5258e6d0d07dc059185078.png&quot; alt=&quot;e8de63708d5258e6d0d07dc059185078.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当Device Client为公共客户端，将退化为OAuth1.0认证方式。&lt;/p&gt;
&lt;h2&gt;2.4. OIDC&lt;/h2&gt;
&lt;p&gt;OpenID Connect 1.0 是 OAuth 2.0 协议的一个简单身份层。它允许客户端基于授权服务器执行的身份验证来验证最终用户的身份，以及以可互操作且类似 REST 的方式获取有关最终用户的基本配置文件信息。&lt;/p&gt;
&lt;p&gt;简单来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权码模式：使用response_type=code，用授权码换取令牌AccessToken。&lt;/li&gt;
&lt;li&gt;OIDC：使用scope=openid&amp;amp;response_type=code，用授权码换取用于验证身份的JWT。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. OAuth2攻击面&lt;/h1&gt;
&lt;h2&gt;3.1. CSRF导致绑定劫持&lt;/h2&gt;
&lt;p&gt;攻击者抓取认证请求构造恶意url，并诱骗已经登录的网用户点击(比如通过邮件或者QQ等方式)，认证成功后用户的帐号会同攻击者的帐号绑定到一起。&lt;/p&gt;
&lt;p&gt;OAuth 2.0提供了state参数用于防御CSRF，认证服务器在接收到的state参数按原样返回给redirect_uri，客户端收到该参数并验证与之前生成的值是否一致，除此方法外也可使用传统的CSRF防御方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;案例1: &lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-054785&quot;&gt;人人网-百度OAuth 2.0 redirect_uir CSRF 漏洞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.2. redirect_uri绕过导致授权劫持&lt;/h2&gt;
&lt;p&gt;根据OAuth的认证流程，用户授权凭证会由服务器转发到redirect_uri对应的地址。&lt;/p&gt;
&lt;p&gt;如果攻击者伪造redirect_uri为自己的地址，然后诱导用户发送该请求，之后获取的凭证就会发送给攻击者伪造的回调地址，攻击者使用该凭证即可登录用户账号，造成授权劫持。&lt;/p&gt;
&lt;p&gt;正常情况下，为了防止该情况出现，认证服务器会验证自己的client_id与回调地址是否对应，常见的方法是验证回调地址的主域。&lt;/p&gt;
&lt;p&gt;以下几种情况验证配置不当，容易导致授权劫持：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;未验证&lt;/p&gt;
&lt;p&gt;未验证的情况，可以直接跳出外域。案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2013-045318&quot;&gt;土豆网某处认证缺陷可劫持oauth_token&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auth.app.com.evil.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.com?auth.app.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.com?@auth.app.com&lt;/code&gt; 案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-059427&quot;&gt;腾讯OAuth平台 redirect_uri 过滤不严可能导致用户信息遭窃取（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth.app.com@evil.com&lt;/code&gt; 案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2013-045327&quot;&gt;绕过网易oauth认证的redirect_uri限制劫持帐号token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth.app.com@evil.com&lt;/code&gt; 案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-059676&quot;&gt;腾讯OAuth平台redirect_uri过滤不严可能导致用户信息遭窃取（四）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.comauth.app.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.com:auth.app.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.com.auth.app.com&lt;/code&gt; 案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-059403&quot;&gt;腾讯OAuth平台redirect_uri过滤不严可能导致用户信息遭窃取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evil.com:@auth.app.com&lt;/code&gt; 案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-059455&quot;&gt;新浪微博OAuth平台redirect_uri过滤不严可能导致用户信息遭窃取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宽字符绕过 案例: &lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-059639&quot;&gt;腾讯OAuth平台redirect_uri过滤不严可能导致用户信息遭窃取（三）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子域可控&lt;/p&gt;
&lt;p&gt;对回调地址验证了主域为app.com，但其子域evil.app.com可被任意用户注册使用。案例:&lt;a href=&quot;http://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-060586&quot;&gt;新浪微博部分App Oauth2漏洞&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跨域&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用可信域跳转盗取授权码。
&lt;ol&gt;
&lt;li&gt;如果网站存在任意跳转，如&lt;code&gt;https://www.example.com/?return_url=&lt;/code&gt;，且未校验跳转后地址。可以构造如下向量&lt;code&gt;https://www.example.com/?return_url=https://www.evil.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;诱骗用户访问该链接&lt;code&gt;https://www.example.com/oauth/authorize?client_id=xxx&amp;amp;redirect_uri=https://www.example.com/?return_url=https://www.evil.com&amp;amp;response_type=code&amp;amp;state=xxx&lt;/code&gt;触发OAuth认证&lt;/li&gt;
&lt;li&gt;用户授权之后，会继续跳转到&lt;code&gt;https://www.evil.com&lt;/code&gt;，攻击者可以从&lt;code&gt;referer&lt;/code&gt;头获取到授权码。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;利用可信域referer盗取授权码。
&lt;ol&gt;
&lt;li&gt;如果跳转后页面可控，比如可以插入自定义图片，或者存在xss漏洞，可以构造向量&lt;code&gt;&amp;lt;img src=&quot;https://www.evil.com&quot;&amp;gt;&lt;/code&gt;，用户授权之后，会向&lt;code&gt;https://www.evil.com&lt;/code&gt;请求资源文件，攻击者可以从&lt;code&gt;referer&lt;/code&gt;头获取到授权码。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3.3. scope越权访问&lt;/h2&gt;
&lt;p&gt;案例:&lt;a href=&quot;https://coolshell.cn/articles/11021.html&quot;&gt;从“黑掉GITHUB”学WEB安全开发&lt;/a&gt;展示了scope权限控制不当带来的安全风险，同时将授权劫持的几个方面演绎的淋漓尽致。&lt;/p&gt;
&lt;h1&gt;4. 名词解释&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CAS: Central Authentication Service, 中心认证服务&lt;/li&gt;
&lt;li&gt;AS: Authorization Server, 授权服务器&lt;/li&gt;
&lt;li&gt;RS: Resource Server, 资源服务器&lt;/li&gt;
&lt;li&gt;SPA: Single Page Application, 单页应用&lt;/li&gt;
&lt;li&gt;SSO: Single Sign On, 单点登录&lt;/li&gt;
&lt;li&gt;OIDC: OpenID Connect, 开放身份连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;5. 参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5849&quot;&gt;rfc5849 - The OAuth 1.0 Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot;&gt;rfc6749 - The OAuth 2.0 Authorization Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6750&quot;&gt;rfc6750 - The OAuth 2.0 Authorization Framework: Bearer Token Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6819&quot;&gt;rfc6819 - OAuth 2.0 Threat Model and Security Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7009&quot;&gt;rfc7009 - OAuth 2.0 Token Revocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7521&quot;&gt;rfc7521 - Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7522&quot;&gt;rfc7522 - Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7523&quot;&gt;rfc7523 - JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7591&quot;&gt;rfc7591 - OAuth 2.0 Dynamic Client Registration Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7592&quot;&gt;rfc7592 - OAuth 2.0 Dynamic Client Registration Management Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7636&quot;&gt;rfc7636 - Proof Key for Code Exchange by OAuth Public Clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7662&quot;&gt;rfc7662 - OAuth 2.0 Token Introspection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8252&quot;&gt;rfc8252 - OAuth 2.0 for Native Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8414&quot;&gt;rfc8414 - OAuth 2.0 Authorization Server Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8628&quot;&gt;rfc8628 - OAuth 2.0 Device Authorization Grant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8693&quot;&gt;rfc8693 - OAuth 2.0 Token Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8705&quot;&gt;rfc8705 - OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics&quot;&gt;Security Best Current Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps&quot;&gt;OAuth 2.0 for Browser-Based Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://oauth.net/2/&quot;&gt;oauth.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/92051359&quot;&gt;白话让你理解什么是oAuth2协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/h2zZhou/p/5741262.html&quot;&gt;OAuth 2.0攻击面与案例总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.authing.cn/blog/558&quot;&gt;OIDC &amp;amp; OAuth2.0 协议及其授权模式详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2019/04/oauth_design.html&quot;&gt;OAuth 2.0 的一个简单解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openid.net/connect/&quot;&gt;OpenID Connect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item></channel></rss>